- Container is like a lightweight, standalone executable package that includes everything needed to run a piece of software, including the code, runtime, libraries, and system tools. 
    containers provide consistency across different environments and make it easy to deploy and run applications.

- Orchestration - managing and coordinating multiple containers to work together seamlessly. Kubernetes helps automate tasks like deploying, scaling, and managing containerized applications.

- Node is an individual machine (physical or virtual) that is part of a cluster. Nodes are responsible for running containers and executing tasks assigned by the control plane, 
    making them the worker machines in the Kubernetes system.

- Cluster is a set of nodes (machines) that work together to run containerized applications. It includes a control plane for managing the cluster and nodes that execute tasks. 
    Clusters provide a unified environment for deploying and managing applications at scale.

- Pod is the smallest deployable unit in Kubernetes, representing a single instance of a running process. Pods can contain one or more containers that share resources and a network namespace.
    They are the basic building blocks of applications in Kubernetes.

kubectl run nginx --image=nginx  --> to create a pod (here nginx is a pod name)
kubectl get pods  --> to know how many pods are running
kubectl get pods -o wide  --> to get more information about the pods
kubectl describe pod nginx  --> to know more about a particular pod

- kubernetes uses yaml files as inputs for the creation of objects such as pods, replicas, deployment services, etc.

- group of pods --> Replica set
- group of nodes --> cluster or node cluster
