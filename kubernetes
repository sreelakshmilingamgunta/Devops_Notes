- Container is like a lightweight, standalone executable package that includes everything needed to run a piece of software, including the code, runtime, libraries, and system tools. 
    containers provide consistency across different environments and make it easy to deploy and run applications.

- Orchestration - managing and coordinating multiple containers to work together seamlessly. Kubernetes helps automate tasks like deploying, scaling, and managing containerized applications.

- Node is an individual machine (physical or virtual) that is part of a cluster. Nodes are responsible for running containers and executing tasks assigned by the control plane, 
    making them the worker machines in the Kubernetes system.

- Cluster is a set of nodes (machines) that work together to run containerized applications. It includes a control plane for managing the cluster and nodes that execute tasks. 
    Clusters provide a unified environment for deploying and managing applications at scale.

- Pod is the smallest deployable unit in Kubernetes, representing a single instance of a running process. Pods can contain one or more containers that share resources and a network namespace.
    They are the basic building blocks of applications in Kubernetes.

kubectl run nginx --image=nginx  --> to create a pod (here nginx is a pod name)
kubectl get pods  --> to know how many pods are running
kubectl get pods -o wide  --> to get more information about the pods
kubectl describe pod nginx  --> to know more about a particular pod
kubectl create -f pod-defenition.yml --> to create a pds or containers using yam script file  --> apply
kubectl run <pod name> --image=<image name> --dry-run=client -o yaml ---> to generate yaml script for creating pod using image


- kubernetes uses yaml files as inputs for the creation of objects such as pods, replicas, deployment services, etc.

- group of pods --> Replica set
- group of nodes --> cluster or node cluster


#creating pod using yaml script ? 

apiVersion: v1
kind: Pod
metadata: 
    name: myapp-pod
    labels:
        app: my-app
        type: front-end
spec:
    containers:
        - name: nginx
          image: nginx

# creating Replica Controllers using Yaml script ? 

apiVersion: v1
kind: ReplicationController
metadata: --------------------------------------------> ReplicaController Meta Data
    name: myapp-rc
    labels:
        app: myapp
        type: front-end
spec:   -----------------------------------------------> ReplicaController Spec
    template:
        metadata: --------------------------------------> Pod Meta Data
            name: myapp-pod
            labels:
                app: my-app
                type: front-end
        spec: --------------------------------------------> Pod Spec
           containers:
                - name: nginx
                  image: nginx
    replicas: 3
kubectl get replicationcontroller   -->  to view created replica controllers 

# creating Replica Set usinng yaml script

apiVersion: apps/v1
kind: ReplicaSet
metadata: --------------------------------------------> Replica SetMeta Data
    name: myapp-replicaset
    labels:
        app: myapp
        type: front-end
spec:   -----------------------------------------------> Replica Set
    template:
        metadata: --------------------------------------> Pod Meta Data
            name: myapp-pod
            labels:
                app: my-app
                type: front-end
        spec: --------------------------------------------> Pod Spec
           containers:
                - name: nginx
                  image: nginx
    replicas: 3
    selector:  ----------------------------> identify what pods fall under it
        matchLabels: ----------------------> matches the labels specified under it to the labels on the pods.
            type: front-end


kubectl replace -f replicaset-definition.yml -----> to update definition file
kubectl scale --replicas=6 -f replicaset-definition.yml ---> to scale the replications
kubectl scale --replicas=6 replicaset(type) myapp-replicaset(name) 
kubectl delete replicaset myapp-replicaset(name) -----> also delete underlying PODs

